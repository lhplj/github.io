<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/">
    <title>lhplj</title>
    <link href="https://lhplj.github.io/feed.xml" rel="self" />
    <link href="https://lhplj.github.io" />
    <updated>2024-08-27T11:37:55+08:00</updated>
    <author>
        <name>lhplj</name>
    </author>
    <id>https://lhplj.github.io</id>

    <entry>
        <title>JVM</title>
        <author>
            <name>lhplj</name>
        </author>
        <link href="https://lhplj.github.io/jvm.html"/>
        <id>https://lhplj.github.io/jvm.html</id>

        <updated>2024-08-27T10:42:08+08:00</updated>
            <summary>
                <![CDATA[
                    内存参数 -Xms 堆内存初始大小(等同于 -XX:InitialHeapSize ) -Xmx 堆内存最大大小(等同于 -XX:MaxHeapSize ) -Xmn 新生代大小,扣除新生代剩下的就是老年代大小(等同于 -XX:NewSize 及 -XX:MaxNewSize 会覆盖这两个的配置) -Xss 线程栈大小 -XX:NewSize 初始新生代大小 -XX:MaxNewSize 最大新生代大小 -XX:InitialHeapSize 初始堆大小 -XX:MaxHeapSize 最大堆大小 -XX:MetaspaceSize 元空间（永久代）大小，jdk1.8 之前用 -XX:PermSize 设置 -XX:MaxMetaspaceSize 元空间（永久代）最大大小，jdk8 之前用 -XX:MaxPermSize 设置 -XX:SurvivorRatio 新生代 Eden 区和 Survivor 区的比例，默认为 8，即8:1:1 -XX:MaxTenuringThreshold 晋升年龄最大阈值，默认15。在新生代中对象存活次数(经过YGC的次数)后仍然存活，就会晋升到老年代。每经过一次YGC，年龄加1，当survivor区的对象年龄达到TenuringThreshold时，表示该对象是长存活对象，就会直接晋升到老年代。 -XX:TargetSurvivorRatio&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <h3 id="内存参数">内存参数</h3>
<pre><code>-Xms 堆内存初始大小(等同于 -XX:InitialHeapSize )
-Xmx 堆内存最大大小(等同于 -XX:MaxHeapSize )
-Xmn 新生代大小,扣除新生代剩下的就是老年代大小(等同于 -XX:NewSize 及 -XX:MaxNewSize 会覆盖这两个的配置)
-Xss 线程栈大小
-XX:NewSize 初始新生代大小
-XX:MaxNewSize 最大新生代大小
-XX:InitialHeapSize 初始堆大小
-XX:MaxHeapSize 最大堆大小
-XX:MetaspaceSize 元空间（永久代）大小，jdk1.8 之前用 -XX:PermSize 设置
-XX:MaxMetaspaceSize 元空间（永久代）最大大小，jdk8 之前用 -XX:MaxPermSize 设置
-XX:SurvivorRatio 新生代 Eden 区和 Survivor 区的比例，默认为 8，即8:1:1
-XX:MaxTenuringThreshold 晋升年龄最大阈值，默认15。在新生代中对象存活次数(经过YGC的次数)后仍然存活，就会晋升到老年代。每经过一次YGC，年龄加1，当survivor区的对象年龄达到TenuringThreshold时，表示该对象是长存活对象，就会直接晋升到老年代。
-XX:TargetSurvivorRatio 设定survivor区的目标使用率。默认50，即survivor区对象目标使用率为50%。

-XX:+HeapDumpOnOutOfMemoryError 内存溢出时输出堆内存文件
-XX:HeapDumpPath=/path/to/heap.hprof 堆内存文件路径
</code></pre>
<p>一般-XX:MetaspaceSize 和 -XX:MaxMetaspaceSize 设置一样的大小, -Xms 和 -Xmx 设置一样的大小，这意味着堆内存的大小在整个程序运行期间不会发生变化,
这种配置有几个影响：</p><ol>
<li>减少垃圾回收的频率：当堆的大小固定时，垃圾回收（GC）可以更容易地进行优化，因为它只需要处理固定大小的内存。如果堆大小变动，JVM 需要管理堆的调整，这可能会影响 GC 的效率。</li>
<li>避免动态调整带来的性能损失：固定堆大小可以避免在运行过程中动态调整堆内存大小带来的性能开销。这通常会减少垃圾回收时的停顿时间，因为堆的大小不会因应用负载的变化而波动。</li>
<li>潜在的内存不足问题：如果应用程序的内存需求超出了设置的 -Xmx 值，那么固定堆大小并不能防止 OutOfMemoryError 错误。你需要确保 -Xmx 设置的值足够大，以满足应用程序的内存需求。</li>
<li>GC 调优：虽然固定堆大小可以减少 GC 的频率和复杂性，但 GC 的具体行为还取决于所使用的 GC 算法和其他 JVM 参数。你可能仍然需要根据应用程序的需求进行 GC 参数的调优。
总结来说，将 -Xms 和 -Xmx 设置为相同的值可以帮助减少由于堆内存调整引起的性能问题，但并不能完全避免垃圾回收。GC 的发生仍然取决于应用程序的内存使用模式和所选择的垃圾回收算法。</li>
</ol>
<h3 id="gc参数">GC参数</h3>
<pre><code>-XX:+PrintGCDetails：输出详细的 GC 信息。
-XX:+PrintGCDateStamps：在 GC 日志中添加时间戳。
-Xloggc:/path/to/gc.log：指定 GC 日志文件的路径。
-XX:+UseG1GC：使用 G1 垃圾回收器。
-XX:+UseParallelGC：使用并行垃圾回收器。
-XX:+UseConcMarkSweepGC：使用 CMS 垃圾回收器（注意，CMS 从 JDK 14 开始已被弃用）。
</code></pre>
<h4 id="full-gc">Full GC</h4>
<p>Full GC是指对整个堆内存（包括新生代和老年代）以及元空间进行垃圾回收的过程。Full GC通常比Minor GC（只针对新生代进行垃圾回收）要耗时更长，并且会导致所有用户线程暂停（Stop The World），因此应该尽量避免或减少Full GC的发生。
一般情况下，只需要看Full GC的总次数和执行的间隔时间。一般Full GC间隔时间在13分钟以上，都属于正常的。一旦低于1分钟，就说明堆栈内存严重不足，需要调整了.</p><h4 id="注意事项">注意事项</h4>
<ul>
<li>确保指定的日志文件路径对 JVM 进程有写权限。</li>
<li>GC 日志文件可能会很大，所以需要定期检查和管理这些文件。
启用 GC 日志后，你可以分析 GC 活动，以了解内存使用情况和性能瓶颈。可以使用一些工具来分析这些日志，比如 GCViewer 或 GCEasy。</li>
</ul>
<h3 id="查看jvm参数">查看JVM参数</h3>
<pre><code># 通过jps 查验java 进程及pid
jps -l
# jinfo pid 可以查看JVM进程所有的属性设置和配置参数(63936 为进程ID)
jinfo 63936
# 通过jmap查看 JVM 的堆的配置信息(63936 为进程ID)
jmap -heap 63936
</code></pre>
<h3 id="jvm内存结构">JVM内存结构</h3>
<ul>
<li>Heap(-Xms -Xmx)(Full GC)<ul>
<li>Young新生代(-Xmn 默认Heap的1/3 )(Minor GC)<ul>
<li>Eden伊甸园区(默认Young的8/10)</li>
<li>Survivor0(From)幸存者0区(默认Young的1/10)</li>
<li>Survivor1(To)幸存者1区(默认Young的1/10)</li>
</ul>
</li>
<li>Old老年代(默认Heap的2/3)(Major GC)</li>
</ul>
</li>
<li>Perm(JDK7永久区 -XX:PermSize JDK8元空间)<ul>
<li>JDK7永久区(-XX:PermSize -XX:MaxPermSize)</li>
<li>JDK8元空间(-XX:MetaspaceSize -XX:MaxMetaspaceSize)</li>
</ul>
</li>
</ul>
<h3 id="gc算法">GC算法</h3>
<ul>
<li>引用计数<br>  对于互相引用的情况无法进行内存清理</li>
<li>内存复制<br>  新生代 Eden 区到 Survivor 区用的是内存复制.From与To空间一样,且身份不固定,每次必有一个是空的,GC时谁空谁就是To,直接把From及Eden中未回收的放到To中,之后角色互换.
  每经历一次YGC幸存者年龄加1,年龄达到15后,会被移到Old区<ul>
<li>优点:内存连续</li>
<li>缺点:耗费内存</li>
</ul>
</li>
<li>标记清除<br>  老年代使用的算法.<ul>
<li>优点:节约内存</li>
<li>缺点:存在内存碎片</li>
</ul>
</li>
<li>标记覆盖<br>  老年代使用的算法.</li>
</ul>

            ]]>
        </content>
    </entry>
    <entry>
        <title>top</title>
        <author>
            <name>lhplj</name>
        </author>
        <link href="https://lhplj.github.io/top.html"/>
        <id>https://lhplj.github.io/top.html</id>

        <updated>2024-08-27T10:36:20+08:00</updated>
            <summary>
                <![CDATA[
                    显示 swap 执行top命令后,按f键会显示top列的编辑界面,上下键移动光标到SWAP项,空格选中后,ESC返回后即可在最后一列看到各进程占用的swap内存大小
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <h1>显示 swap </h1>
<p>执行top命令后,按f键会显示top列的编辑界面,上下键移动光标到SWAP项,空格选中后,ESC返回后即可在最后一列看到各进程占用的swap内存大小</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>GaussDB</title>
        <author>
            <name>lhplj</name>
        </author>
        <link href="https://lhplj.github.io/gaussdb.html"/>
        <id>https://lhplj.github.io/gaussdb.html</id>

        <updated>2024-08-23T11:00:38+08:00</updated>
            <summary>
                <![CDATA[
                    -- 查询表信息 select * from pg_tables; -- 查询 schema 下的表信息 select * from pg_tables where schemaname = 'schemaname'; -- 查询表定义 select * from pg_get_tabledef('schema.tablename');
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <pre class="language-sql"><code>-- 查询表信息
select * from pg_tables;
-- 查询 schema 下的表信息
select * from pg_tables where schemaname = 'schemaname';
-- 查询表定义
select * from pg_get_tabledef('schema.tablename');</code></pre>
            ]]>
        </content>
    </entry>
    <entry>
        <title>logrorate</title>
        <author>
            <name>lhplj</name>
        </author>
        <link href="https://lhplj.github.io/logrorate.html"/>
        <id>https://lhplj.github.io/logrorate.html</id>

        <updated>2024-07-23T14:50:14+08:00</updated>
            <summary>
                <![CDATA[
                    linux自带的日志文件管理工具 # 主配置文件,通过 include /etc/logrorate.d 加载目录下的所有日志管理脚本 /etc/logrorate.conf # 日志管理脚本目录 /etc/logrorate.d/ # 以 nginx 日志切割与归档为例 # 以下为 /etc/logrorate.d/nginx 的内容 /home/devops/install/nginx/logs/*log { create 0664 root root daily dateext rotate 180 missingok notifempty compress sharedscripts postrotate /bin/kill -USR1 `cat /home/devops/install/nginx/logs/nginx.pid 2&gt;/dev/null` 2&gt;/dev/null || true endscript } # create&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p>linux自带的日志文件管理工具</p>
<pre class="language-bash"><code># 主配置文件,通过 include /etc/logrorate.d 加载目录下的所有日志管理脚本
/etc/logrorate.conf
# 日志管理脚本目录
/etc/logrorate.d/

# 以 nginx 日志切割与归档为例
# 以下为 /etc/logrorate.d/nginx 的内容
/home/devops/install/nginx/logs/*log {
    create 0664 root root
    daily
    dateext
    rotate 180
    missingok
    notifempty
    compress
    sharedscripts
    postrotate
        /bin/kill -USR1 `cat /home/devops/install/nginx/logs/nginx.pid 2&gt;/dev/null` 2&gt;/dev/null || true
    endscript
}

# create 以指定权限创建新的日志文件
# daily 处理频率 daily 每天 monthly 每月 weekly 每周 yearly 每年
# dateext 使用日期格式作为命名格式
# rorate 180 最多存储 180 个归档日志,超出后删除时间最久的
# missingok 忽略错误
# notifempy 忽略空日志文件的处理
# compress 归档后进行压缩
# sharedscripts postrorate endscript 通常一起出现


# 强制进行一次切割与归档
/usr/sbin/logrotate -f /etc/logratate.d/nginx</code></pre>
            ]]>
        </content>
    </entry>
    <entry>
        <title>VSCODE正则替换</title>
        <author>
            <name>lhplj</name>
        </author>
        <link href="https://lhplj.github.io/vscodezheng-ze-ti-huan.html"/>
        <id>https://lhplj.github.io/vscodezheng-ze-ti-huan.html</id>

        <updated>2024-06-27T15:36:28+08:00</updated>
            <summary>
                <![CDATA[
                    小写转大写:如将下划线分隔的单词转驼峰 查找 _([a-z]) 替换 \U$1 \L 大写字母转小写 \U 小写字母转大写 $1 为正则匹配的第一项
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p>小写转大写:如将下划线分隔的单词转驼峰</p>
<p>查找 _([a-z])</p>
<p>替换 \U$1</p>
<p>\L 大写字母转小写</p>
<p>\U 小写字母转大写</p>
<p>$1 为正则匹配的第一项</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>ReverseLinkedList</title>
        <author>
            <name>lhplj</name>
        </author>
        <link href="https://lhplj.github.io/reverselinkedlist.html"/>
        <id>https://lhplj.github.io/reverselinkedlist.html</id>

        <updated>2024-05-20T09:00:01+08:00</updated>
            <summary>
                <![CDATA[
                    public class ReverseLinkedList { class Node&lt;T&gt; { private T value; private Node&lt;T&gt; next; } public static void main(String[] args) { ReverseLinkedList.Node&lt;Integer&gt; head = build(); print(head); print(reverse(head)); } private static Node&lt;Integer&gt; build() { ReverseLinkedList x = new ReverseLinkedList(); Node&lt;Integer&gt; head = x.new Node&lt;&gt;(); head.value = 0;&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <pre class="language-java"><code>public class ReverseLinkedList {

    class Node&lt;T&gt; {
        private T value;
        private Node&lt;T&gt; next;
    }

    public static void main(String[] args) {
        ReverseLinkedList.Node&lt;Integer&gt; head = build();
        print(head);
        print(reverse(head));
    }

    private static Node&lt;Integer&gt; build() {
        ReverseLinkedList x = new ReverseLinkedList();
        Node&lt;Integer&gt; head = x.new Node&lt;&gt;();
        head.value = 0;
        Node&lt;Integer&gt; cur = head;
        for (int i = 1; i &lt; 10; i++) {
            Node&lt;Integer&gt; next = x.new Node&lt;&gt;();
            next.value = i;
            cur.next = next;

            cur = next;
        }
        return head;
    }

    /**
     * 打印链表
     * @param head
     */
    private static void print(Node&lt;Integer&gt; head) {
        if (head == null) {
            return;
        }
        List&lt;Integer&gt; list = new ArrayList&lt;&gt;();
        list.add(head.value);
        Node&lt;Integer&gt; next = head.next;
        while (next != null) {
            list.add(next.value);
            next = next.next;
        }
        System.out.println(JSON.toJSONString(list));
    }

    /**
     * 反转后返回新head
     * @param head
     * @return
     */
    private static Node&lt;Integer&gt; reverse(Node&lt;Integer&gt; head) {
        Node&lt;Integer&gt; pre = null;
        Node&lt;Integer&gt; node = head;
        Node&lt;Integer&gt; next = head.next;
        while (next != null) {
            next = node.next;
            node.next = pre;

            pre = node;
            if (next == null) {
                break;
            }
            node = next;
        }
        return node;
    }

}
</code></pre>
            ]]>
        </content>
    </entry>
    <entry>
        <title>MergeSort</title>
        <author>
            <name>lhplj</name>
        </author>
        <link href="https://lhplj.github.io/mergesort.html"/>
        <id>https://lhplj.github.io/mergesort.html</id>

        <updated>2024-05-17T16:20:19+08:00</updated>
            <summary>
                <![CDATA[
                    归并排序时间复杂度O(N * logN) 优于冒泡/选择排序时间复杂度O(N^2) public class MergeSort { public static void main(String[] args) { int[] arr = {20, 24, 5, 17, 14, 25, 15, 52}; mergeSort1(arr); // mergeSort2(arr); } /** * 递归实现 */ private static void mergeSort1(int[] arr) { if (arr == null || arr.length&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p>归并排序时间复杂度O(N * logN)</p>
<p>优于冒泡/选择排序时间复杂度O(N^2)</p>
<pre class="language-java"><code>public class MergeSort {
    public static void main(String[] args) {
        int[] arr = {20, 24, 5, 17, 14, 25, 15, 52};
        mergeSort1(arr);
        //        mergeSort2(arr);
    }

    /**
     * 递归实现
     */
    private static void mergeSort1(int[] arr) {
        if (arr == null || arr.length &lt; 2) {
            return;
        }
        process(arr, 0, arr.length - 1);
    }

    private static void process(int[] arr, int l, int r) {
        if (l == r) {
            return;
        }
        // 将[l, r] 二分为 [l, m] 和 [m + 1, r]
        int m = l + (r - l &gt;&gt; 1);
        process(arr, l, m);
        process(arr, m + 1, r);
        merge(arr, l, m, r);
    }

    private static void merge(int[] arr, int l, int m, int r) {
        int[] help = new int[r - l + 1];
        // p1 指向[l,m]
        // p2 指向[m + 1, r]
        int i = 0, p1 = l, p2 = m + 1;
        while (p1 &lt;= m &amp;&amp; p2 &lt;= r) {
            // 比较左区间与右区间,直到某区间结束
            help[i++] = arr[p1] &lt;= arr[p2] ? arr[p1++] : arr[p2++];
        }
        // 处理未结束的区间
        while (p1 &lt;= m) {
            help[i++] = arr[p1++];
        }
        while (p2 &lt;= r) {
            help[i++] = arr[p2++];
        }

        for (i = 0; i &lt; help.length; i++) {
            arr[l + i] = help[i];
        }
        System.out.println(JSON.toJSON(arr));
    }

    /**
     * 非递归实现
     */
    private static void mergeSort2(int[] arr) {
        if (arr == null || arr.length &lt; 2) {
            return;
        }
        int mergeSize = 1;
        int maxMergeSize = (arr.length &gt;&gt; 1) + 1;
        while (mergeSize &lt;= maxMergeSize) {
            int l = 0;
            while (l &lt; arr.length) {
                int m = l + mergeSize - 1;
                if (m &gt;= arr.length) {
                    break;
                }
                int r = Math.min(m + mergeSize, arr.length - 1);
                merge(arr, l, m, r);
                l = r + 1;
            }
            mergeSize &lt;&lt;= 1;
        }
    }
}
</code></pre>
<p><strong>应用场景:查找数组中每个位置上,左侧或右侧所有比这个数大或小的问题.</strong></p>
<p><strong>数组小和</strong>:在一个数组中,一个数左边比它小的数的总和,叫数的小和,所有数的小和累加起来,叫数组的小和.(<strong>注意</strong>:由于要统计左侧数据,所以在merge左右区间时,如果遇到相等的数,要先处理右区间的)</p>
<pre class="language-java"><code>public class SmallSum {
    public static void main(String[] args) {
        int[] arr = {1, 3, 4, 2, 5};
        // 1的左侧小于1的无
        // 3的左侧小于3的1
        // 4的左侧小于4的1,3
        // 2的左侧小于2的1
        // 5的左侧小于5的1,3,4,2
        // 小和为 16
        mergeSort1(arr);
    }

    /**
     * 递归实现
     */
    private static void mergeSort1(int[] arr) {
        if (arr == null || arr.length &lt; 2) {
            return;
        }
        int result = process(arr, 0, arr.length - 1);
        System.out.println(result);
    }

    private static int process(int[] arr, int l, int r) {
        if (l == r) {
            return 0;
        }
        int m = l + (r - l &gt;&gt; 1);
        return process(arr, l, m) + process(arr, m + 1, r) +
                merge(arr, l, m, r);
    }

    private static int merge(int[] arr, int l, int m, int r) {
        int result = 0;
        int[] help = new int[r - l + 1];
        int i = 0, p1 = l, p2 = m + 1;
        while (p1 &lt;= m &amp;&amp; p2 &lt;= r) {
            result += arr[p1] &lt; arr[p2] ? (r - p2 + 1) * arr[p1] : 0;
            // 由于要统计左侧数据,所以在merge左右区间时,如果遇到相等的数,要先处理右区间的
            help[i++] = arr[p1] &lt; arr[p2] ? arr[p1++] : arr[p2++];
        }
        while (p1 &lt;= m) {
            help[i++] = arr[p1++];
        }
        while (p2 &lt;= r) {
            help[i++] = arr[p2++];
        }

        for (i = 0; i &lt; help.length; i++) {
            arr[l + i] = help[i];
        }
        System.out.println(JSON.toJSON(arr));
        return result;
    }

}</code></pre>
<p><strong>降序对</strong>:在一个数组中,一个数与右边每个比它小的数组成一个降序对,求数组的所有降序对.(<strong>注意</strong>:由于要统计右侧数据,所以在merge左右区间时,如果遇到相等的数,要先处理左区间的)</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Master公式</title>
        <author>
            <name>lhplj</name>
        </author>
        <link href="https://lhplj.github.io/mastergong-shi.html"/>
        <id>https://lhplj.github.io/mastergong-shi.html</id>

        <updated>2024-05-16T13:17:22+08:00</updated>
            <summary>
                <![CDATA[
                    形如T(N) = a * T(N/b) + O(N^d) 其中a/b/d都是常数的递归函数,可以直接通过Master公式来确定时间复杂度 如果log(b,a) &lt; d 复杂度为 O(N^d) 如果log(b,a) &gt; d 复杂度为 O(N^Log(b,a)) 如果log(b,a) = d 复杂度为 O(N^d * logN)
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p>形如T(N) = a * T(N/b) + O(N^d) 其中a/b/d都是常数的递归函数,可以直接通过Master公式来确定时间复杂度</p>
<ol>
<li>如果log(b,a) &lt; d 复杂度为 O(N^d)</li>
<li>如果log(b,a) &gt; d 复杂度为 O(N^Log(b,a))</li>
<li>如果log(b,a) = d 复杂度为 O(N^d * logN)</li>
</ol>
            ]]>
        </content>
    </entry>
    <entry>
        <title>求整数二进制位最右(低)1的位置</title>
        <author>
            <name>lhplj</name>
        </author>
        <link href="https://lhplj.github.io/qiu-zheng-shu-er-jin-zhi-wei-zui-youdi1de-wei-zhi.html"/>
        <id>https://lhplj.github.io/qiu-zheng-shu-er-jin-zhi-wei-zui-youdi1de-wei-zhi.html</id>

        <updated>2024-05-15T14:59:17+08:00</updated>
            <summary>
                <![CDATA[
                    # 对于任意整数N,求N的二进制位最右1的位置 int pos = N &amp; ((~N) + 1); # 注意上述得到的结果是保留最右1,其余位为0后对应的10进制整数,不是从右向左的序号(从0开始) # 如12的二进制为 0000 1100 # 取反后为 1111 0011 # 取反加1后为 1111 0100 # 与原数&amp;后为 0000 0100 # 对应的10进制整数为 4 # 如果要得到从右向左的序号(从0开始),可以使用以下两种方法 # 方法1 Integer.toBinaryString(n &amp; ~n + 1).length() - 1; # 方法2 (取2的对数)&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <pre class="language-java"><code># 对于任意整数N,求N的二进制位最右1的位置
int pos = N &amp; ((~N) + 1);
# 注意上述得到的结果是保留最右1,其余位为0后对应的10进制整数,不是从右向左的序号(从0开始)
# 如12的二进制为 0000 1100
# 取反后为           1111 0011
# 取反加1后为      1111 0100
# 与原数&amp;后为      0000 0100
# 对应的10进制整数为 4
# 如果要得到从右向左的序号(从0开始),可以使用以下两种方法
# 方法1
Integer.toBinaryString(n &amp; ~n + 1).length() - 1;
# 方法2 (取2的对数)
Math.log(n &amp; ~n + 1) / Math.log(2);
# JDK 中只有 自然对数(以e为底)Math.log(double) 及 常用对数(以10为底)Math.log10(double) 的计算方法
# 其它的可以使用公式 log(a)(b) = ln(b)/ln(a) 或 log(a)(b) = log(10)(b)/log(10)(a)</code></pre>
<p>对原数先取反再加1,最后再与原数进行与操作即可</p>
<p>使用场景</p>
<ol>
<li>求整数N二进制中1的数量
<pre class="language-java"><code>int count = 0;
int rightOne = -1;
while (N != 0) {
    # 找最后边为1的位置
    rightOne = N &amp; ((~N) + 1);
    count++;
    # 将N中最后边的1消掉
    N ^= rightOne;
}</code></pre>
</li>
<li>一个数组中有两种数是奇数个,找出这两种数
<pre class="language-java"><code># 假设数组 arr 中的这两种数为 a 和 b
int eor = 0;
for (int i = 0; i &lt; arr.length; i++) {
    eor ^= arr[i];
}
# 此时 eor = a ^ b
# 因为 a != b 则 eor != 0 则必有二进制位有1
int rigthOne = eor &amp; ((~eor) + 1);
# 则对于 a 和 b 必有一个rigthOne 位置为1一个为 0
# 则必有 rightOne ^ a 和 rightOne ^ b 一个为1一个为0(可通过此方法将a与b分开)
int a = 0;
for (int i = 0; i &lt; arr.length; i++) {
    if (arr[i] &amp; rightOne != 0) {
        a ^= arr[i];
    }
}
int b = eor ^ a;</code></pre>
</li>
</ol>
            ]]>
        </content>
    </entry>
    <entry>
        <title>异或^</title>
        <author>
            <name>lhplj</name>
        </author>
        <link href="https://lhplj.github.io/yi-huo.html"/>
        <id>https://lhplj.github.io/yi-huo.html</id>

        <updated>2024-05-15T14:06:14+08:00</updated>
            <summary>
                <![CDATA[
                    异或运算符^运算规则:相同为0,不同为1 0 ^ 0 = 0; 1 ^ 1 = 0; 0 ^ 1 = 1; 1 ^ 0 = 1; 则对于任意整数N满足 N ^ N = 0; 0 ^ N = N; 进一步,对于任意整数M和N满足 M ^ N ^ N = M; N ^ M ^ N&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p>异或运算符^运算规则:相同为0,不同为1</p>
<pre class="language-java"><code>0 ^ 0 = 0;
1 ^ 1 = 0;
0 ^ 1 = 1;
1 ^ 0 = 1;</code></pre>
<p>则对于任意整数N满足</p>
<pre class="language-java"><code>N ^ N = 0;
0 ^ N = N;</code></pre>
<p>进一步,对于任意整数M和N满足</p>
<pre class="language-java"><code>M ^ N ^ N = M;
N ^ M ^ N = M;</code></pre>
<p><strong>使用场景</strong></p>
<ol>
<li>数值交换
<pre class="language-java"><code># 交换 a 与 b 的值
int a = 7;
int b = 9;
# 正常数值交换,需要使用一个临时变量
int temp = a;
a = b;
b = temp;

# 通过异或
# a = 7 ^ 9;
a = a ^ b;
# b = 7 ^ 9 ^ 9 则 b = 7
b = a ^ b;
# a = 7 ^ 9 ^ 7 则 a = 9 完成交换
a = a ^ b;

# 注意事项: 通过异或交换数值时,要保证2个数指向的不是同一个地址</code></pre>
</li>
<li>一个数组中只有一种数有奇数个,找到这个数
<pre class="language-java"><code># 对于数组 arr 中只有一种数有奇数个,其它为偶数个
int eor = 0;
for (int i = 0; i &lt; arr.length; i++) {
    eor ^= arr[i];
}
# 最后 eor 就是要求的值</code></pre>
</li>
</ol>
<p> </p>
            ]]>
        </content>
    </entry>
</feed>
